[
    {
        "title": "Information Disclosure from HTTP Headers",
        "description": "Information Disclosure from HTTP Headers occurs when a web server exposes sensitive details in response headers, such as server type, software versions, and framework information. Attackers can use this information to fingerprint the technology stack, identify unpatched vulnerabilities, and craft targeted exploits. Common headers that leak information include Server, X-Powered-By and X-AspNet-Version.",
        "impact": "Leaking server details can assist attackers in fingerprinting the application stack and identifying unpatched vulnerabilities. This increases the likelihood of targeted attacks, such as exploiting outdated software or misconfigurations.",
        "recommendations": "Configure the web server to remove or modify unnecessary HTTP headers that expose sensitive information. Use security-focused settings in Apache, Nginx, or IIS to disable disclosure-prone headers and implement a Content Security Policy (CSP).",
        "references": ["OWASP – Information Leakage Guide: https://owasp.org/www-community/Information_Leakage","CWE-200 – Exposure of Sensitive Information: https://cwe.mitre.org/data/definitions/200.html","PortSwigger – Information Disclosure via HTTP Headers: https://portswigger.net/web-security/information-disclosure"]
    },
    {
        "title": "Improper Error Handling",
        "description": "Improper error handling can lead to sensitive information exposure when applications return detailed error messages to users. These errors may include stack traces, database queries, file paths, or system configurations, which can assist attackers in understanding the application’s internal workings.",
        "impact": "Exposed error messages provide valuable insights for attackers, helping them identify vulnerable components, database structures, or authentication mechanisms. This can possibly lead to SQL injection, remote code execution, or even privilege escalation if the attacker leverages the leaked information.",
        "recommendations": "Ensure that error messages are generic and do not expose sensitive details to end users. Implement custom error pages for handling exceptions and configure the application to log detailed errors securely on the server while displaying user-friendly messages. Use try-catch blocks, centralized error handling, and logging frameworks to manage errors effectively without leaking information.",
        "references": ["OWASP – Improper Error Handling Guide: https://owasp.org/www-community/Improper_Error_Handling","CWE-209 – Information Exposure Through an Error Message: https://cwe.mitre.org/data/definitions/209.html","PortSwigger – Information Disclosure via Error Messages: https://portswigger.net/web-security/information-disclosure"]
    },    
    {
        "title": "Default Root WebPage",
        "description": "The default root webpage refers to the initial page that is displayed when a web server is accessed without specifying a particular resource. Often, this page contains generic information about the server or application, which may inadvertently reveal sensitive details about the server's configuration, software versions, or potential vulnerabilities.",
        "impact": "Exposing a default root webpage can provide attackers with valuable information that aids in reconnaissance and planning for an attack. This information may include server software details, directory structures, and other insights that could be exploited to compromise the system or launch targeted attacks.",
        "recommendations": "To mitigate the risks associated with a default root webpage, it is essential to customize or disable the default page to prevent the disclosure of sensitive information. Additionally, implementing proper security measures, such as access controls and regular security assessments, can help protect against potential threats.",
        "references": ["Security issues of exposing default server home page - https://security.stackexchange.com/questions/194119/what-are-the-security-issues-of-exposing-default-server-home-page-in-public-inte"]
    },
    {
        "title": "Outdated Libraries",
        "description": "Using outdated libraries or dependencies in an application can introduce known vulnerabilities that attackers can exploit.",
        "impact": "Many open-source and third-party libraries frequently receive security patches, but failing to update them leaves applications susceptible to attacks such as Cross-Site Scripting and Prototype Pollution attacks.",
        "recommendations": "Update all outdated libraries to their latest versions.",
        "references": ["Snyk – Outdated Library Risks: https://snyk.io/learn/outdated-libraries/"]
    },
    {
        "title": "HTTP Strict Transport Security Header Missing (HSTS)",
        "description": "HTTP Strict Transport Security (HSTS) is a security feature that forces browsers to use only HTTPS when communicating with a website. If HSTS is not implemented, attackers can perform Man-in-the-Middle (MITM) attacks, such as SSL stripping, to downgrade secure HTTPS connections to unencrypted HTTP.",
        "impact": "Without HSTS, users may unknowingly connect to a website over insecure HTTP, allowing attackers to intercept or manipulate data in transit.",
        "recommendations": "Enable HSTS by setting the Strict-Transport-Security header in the web server configuration. The header should include directives such as max-age=31536000; includeSubDomains; preload",
        "references": ["OWASP – HTTP Strict Transport Security (HSTS): https://owasp.org/www-project-secure-headers/#hsts","Google Chrome HSTS Preload List: https://hstspreload.org/"]
    },
    {
        "title": "Clickjacking",
        "description": "Clickjacking is a type of user interface manipulation attack where an attacker deceives users into clicking on a concealed or disguised element within an iframe. This can result in unauthorized actions on legitimate websites, such as altering account settings, executing unintended transactions, or granting permissions to malicious sites.",
        "impact": "An attacker can leverage Clickjacking to obtain sensitive information, escalate privileges, or manipulate user actions. For instance, a victim might unknowingly authorize a transaction, enable access to their camera, or click on a phishing link. This can lead to account takeovers, financial fraud, and session hijacking in the affected applications.",
        "recommendations": "Prevent Clickjacking by implementing the X-Frame-Options HTTP header with the value DENY (to block all iframes) or SAMEORIGIN (to allow only same-origin frames).",
        "references": ["OWASP – Clickjacking Defense Cheat Sheet: https://owasp.org/www-community/attacks/Clickjacking","Mozilla MDN – X-Frame-Options Header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"]
    },
    {
        "title": "Improper Authentication Mechanism",
        "description": "Improper authentication mechanisms occur when an application fails to securely verify user identities, allowing unauthorized access. Common issues include weak password policies, missing multi-factor authentication (MFA), insecure session management, hardcoded credentials, and bypassable authentication checks. Attackers can exploit these weaknesses to gain unauthorized access, escalate privileges, or take over accounts.",
        "impact": "An improperly implemented authentication mechanism can lead to account compromise, data breaches, and unauthorized system access. Attackers can exploit brute force attacks, or session hijacking to impersonate legitimate users.",
        "recommendations": "Implement strong authentication measures, including multi-factor authentication (MFA), secure password policies, rate limiting for login attempts, and secure session management. Use industry standards like OAuth 2.0 for authentication.",
        "references": ["OWASP – Authentication Cheat Sheet: https://owasp.org/www-project-authentication-cheat-sheet/","CWE-287 – Improper Authentication: https://cwe.mitre.org/data/definitions/287.html","OWASP Top 10 – Broken Authentication: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"]
    },
    {
        "title": "Imporper Session Termination",
        "description": "Improper session termination occurs when an application fails to securely end user sessions after logout or inactivity, leaving active session tokens or cookies valid. This can allow attackers to reuse stolen session IDs (session fixation), hijack authenticated sessions, or maintain unauthorized access even after a user logs out.",
        "impact": "If sessions are not properly terminated, an attacker can continue using a compromised session token to access sensitive information or perform unauthorized actions. This can lead to account hijacking, data leaks, and privilege escalation.",
        "recommendations": "Ensure session tokens and cookies expire on logout and enforce automatic session timeouts after inactivity. Use HTTP-only, Secure, and SameSite attributes for session cookies to prevent hijacking. Implement server-side session invalidation by removing session data upon logout and revoking any active authentication tokens.",
        "references": ["OWASP – Session Management Cheat Sheet: https://owasp.org/www-project-session-management-cheat-sheet/","CWE-613 – Insufficient Session Expiration: https://cwe.mitre.org/data/definitions/613.html"]
    },
    {
        "title": "Weak Password Policy",
        "description": "A weak password policy allows users to create easily guessable or short passwords, increasing the risk of credential-based attacks. Common weaknesses include lack of complexity requirements, absence of multi-factor authentication (MFA), no password expiration policies, and allowing commonly used passwords. Attackers can exploit weak passwords through brute force attacks, or dictionary attacks.",
        "impact": "Weak passwords make user accounts and systems highly vulnerable to unauthorized access, data breaches, and account takeovers. Attackers leveraging stolen or easily guessed passwords can escalate privileges, compromise sensitive data, and even gain access to an entire network.",
        "recommendations": "Enforce strong password policies requiring at least 12-16 characters, a mix of uppercase, lowercase, numbers, and special characters, and prevent the use of commonly breached passwords. Implement multi-factor authentication (MFA) to add an extra layer of security.",
        "references": ["OWASP – Password Storage Cheat Sheet: https://owasp.org/www-project-cheat-sheets/cheatsheets/Password_Storage_Cheat_Sheet.html","CWE-521 – Weak Password Requirements: https://cwe.mitre.org/data/definitions/521.html"]
    },
    {
        "title": "User Enumeration",
        "description": "User enumeration occurs when an attacker can determine whether a specific username, email, or account exists in an application based on its response to login, registration, password reset, or error messages. This happens due to detailed error messages, inconsistent response times, or different HTTP status codes. Attackers use this vulnerability to confirm valid accounts and launch further attacks such as brute-forcin the target account.",
        "impact": "An attacker can enumerate valid usernames or emails, making it easier to target users with password guessing, social engineering, or credential stuffing attacks. This significantly increases the risk of unauthorized access, account takeovers, and phishing campaigns.",
        "recommendations": "Implement generic error messages for authentication, registration, and password reset functionalities (e.g., \"Invalid credentials\" instead of \"User does not exist\"). Use rate limiting, CAPTCHA, and account lockouts to prevent automated enumeration attacks. Ensure that response times and HTTP status codes are consistent, regardless of whether a username exists or not.",
        "references": ["OWASP – Authentication Cheat Sheet: https://owasp.org/www-project-authentication-cheat-sheet/","OWASP Top 10 – Identification and Authentication Failures: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/","PortSwigger – Username Enumeration: https://portswigger.net/web-security/information-disclosure/exploiting"]
    },
    {
        "title": "Insecure Direct Object Reference (IDOR)",
        "description": "Insecure Direct Object Reference (IDOR) occurs when an application exposes direct access to internal objects (such as database records, files, or user accounts) without proper authorization checks. Attackers can manipulate parameters in URLs, APIs, or form data to access unauthorized information. This flaw typically arises due to missing or improper access control mechanisms.",
        "impact": "If exploited, IDOR can lead to unauthorized access to sensitive data, account takeover, or modification/deletion of critical records. Attackers can escalate privileges, extract personal user information, or even manipulate financial transactions. IDOR is a common vulnerability in APIs and web applications, making it a serious risk.",
        "recommendations": "Implement proper access controls at both client-side and server-side to validate user permissions before granting access to objects. Use unique and unpredictable identifiers (e.g., UUIDs instead of sequential IDs) to prevent enumeration.",
        "references": ["OWASP – Insecure Direct Object Reference (IDOR): https://owasp.org/www-community/attacks/Insecure_Direct_Object_References","CWE-639 – Authorization Bypass Through User-Controlled Key: https://cwe.mitre.org/data/definitions/639.html","PortSwigger – IDOR Exploitation: https://portswigger.net/web-security/access-control/idor"]
    },
    {
        "title": "Unrestricted File Upload",
        "description": "Unrestricted file upload vulnerabilities occur when an application fails to properly validate, sanitize, or restrict uploaded files, allowing attackers to upload malicious scripts, executables, or unauthorized content. This can lead to remote code execution (RCE), server compromise, defacement, or data exfiltration. Common issues include missing file type validation, lack of size restrictions, and improper storage location.",
        "impact": "If an attacker can upload malicious files, they may execute arbitrary commands on the server, leading to complete system compromise. This can enable webshell deployment, privilege escalation, data breaches, or malware distribution. Additionally, unrestricted file uploads can be used for phishing attacks, defacement, and denial-of-service (DoS) attacks.",
        "recommendations": "Implement strict file validation by whitelisting allowed file types and verifying content using MIME type checks and magic byte analysis. Store uploaded files outside the web root directory and disable execution permissions on upload directories. Use randomized filenames and enforce size restrictions, rate limiting, and authentication controls to prevent abuse.",
        "references": ["OWASP – Unrestricted File Upload: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload","CWE-434 – Unrestricted Upload of File with Dangerous Type: https://cwe.mitre.org/data/definitions/434.html","PortSwigger – File Upload Vulnerabilities: https://portswigger.net/web-security/file-upload"]
    },
    {
        "title": "Local File Inclusion / Path Traversal (LFI)",
        "description": "Local File Inclusion (LFI) and Path Traversal vulnerabilities occur when an application improperly processes user-supplied input to access or include local files on the server. Attackers can manipulate file paths (e.g., ../../etc/passwd) to read sensitive system files, execute scripts, or gain deeper access to the server. This flaw often arises due to insufficient input validation and improper use of file inclusion functions in web applications.",
        "impact": "Exploiting LFI or Path Traversal can lead to information disclosure, remote code execution (RCE), privilege escalation, and full system compromise. Attackers can steal credentials, access configuration files, or execute malicious scripts. If combined with file upload vulnerabilities, LFI can escalate into remote command execution, posing a critical security risk.",
        "recommendations": "Implement strict input validation to prevent directory traversal sequences (../). Use allowlists to limit accessible files and avoid dynamically including user-controlled input in file paths. Disable PHP’s include() and require() functions for untrusted sources, and configure the server to restrict file access permissions.",
        "references": ["OWASP – Path Traversal Attack: https://owasp.org/www-community/attacks/Path_Traversal","CWE-22 – Improper Limitation of a Pathname to a Restricted Directory (\"Path Traversal\"): https://cwe.mitre.org/data/definitions/22.html","PortSwigger – Directory Traversal: https://portswigger.net/web-security/file-path-traversal"]
    },
    {
        "title": "HTTP Basic Authentication",
        "description": "HTTP Basic Authentication is a simple authentication mechanism that transmits credentials (username and password) in Base64-encoded format within the request headers. Since it lacks encryption and does not include session management, credentials can be easily intercepted if transmitted over an unprotected channel.",
        "impact": "Attackers can steal credentials via network sniffing, man-in-the-middle (MITM) attacks, or browser cache exploitation if Basic Authentication is used without HTTPS. Since Base64 encoding is easily reversible, leaked credentials can be quickly decrypted and reused.",
        "recommendations": "Avoid using HTTP Basic Authentication for sensitive applications. Instead, use modern authentication mechanisms such as OAuth 2.0, or JWT (JSON Web Tokens). If Basic Authentication must be used, always enforce HTTPS, implement strict access controls to mitigate risks.",
        "references": ["OWASP – Authentication Cheat Sheet: https://owasp.org/www-project-authentication-cheat-sheet/","CWE-1391 – Use of Weak Authentication Scheme: https://cwe.mitre.org/data/definitions/1391.html"]
    },
    {
        "title": "Lack of Antivirus",
        "description": "A lack of antivirus or anti-malware protection on a system leaves it vulnerable to malicious software, ransomware, spyware, and trojans. Without proper security measures, attackers can exploit known vulnerabilities, phishing emails, or infected downloads to compromise the system.",
        "impact": "Without antivirus protection, systems are highly susceptible to malware infections, credential theft, and persistence by attackers. This can result in data exfiltration, system performance degradation, financial fraud, or large-scale network infections.",
        "recommendations": "Deploy and maintain reputable antivirus software with real-time scanning and automatic updates to detect and mitigate malware threats. Use endpoint protection platforms (EPP) and behavior-based detection to enhance security. Regularly update virus definitions, conduct security audits, and enforce user awareness training to minimize infection risks.",
        "references": ["OWASP – Malware Protection Guide: https://owasp.org/www-project-malware-protection/","CWE-693 – Protection Mechanism Failure: https://cwe.mitre.org/data/definitions/693.html"]
    },
    {
        "title": "Privilege Escalation",
        "description": "Privilege escalation occurs when an attacker gains unauthorized access to higher privilege levels within a system, application, or network. This can be achieved through misconfigurations, unpatched vulnerabilities, weak access controls, or exploitation of insecure processes. Privilege escalation is categorized into vertical escalation (gaining higher privileges, such as root/admin access) and horizontal escalation (gaining access to another user's account with similar privileges).",
        "impact": "If successful, attackers can execute arbitrary commands, exfiltrate sensitive data, modify system settings, or disable security controls. Privilege escalation is often a critical step in gaining persistent access, moving laterally within a network, and executing further attacks such as ransomware deployment or credential dumping.",
        "recommendations": "Follow the principle of least privilege (PoLP) to restrict user and application permissions to the minimum necessary. Regularly patch operating systems, applications, and third-party components to mitigate known vulnerabilities. Implement multi-factor authentication (MFA), strong password policies, and endpoint security solutions to reduce the risk of exploitation. Continuously monitor user activities and use intrusion detection systems (IDS) to detect unusual privilege changes.",
        "references": ["OWASP – Least Privilege Principle: https://owasp.org/www-community/Least-Privilege","CWE-269 – Improper Privilege Management: https://cwe.mitre.org/data/definitions/269.html"]
    },
    {
        "title": "Unencrypted Communications",
        "description": "Unencrypted communications occur when data is transmitted over a network without encryption, making it vulnerable to eavesdropping, interception, and manipulation. This often happens when applications use unencrypted protocols like HTTP, FTP, Telnet, or SMTP without TLS. Attackers can perform Man-in-the-Middle (MITM) attacks, sniff network traffic, or inject malicious content into unprotected communications.",
        "impact": "Sensitive data such as user credentials, financial information, API keys, and personal details can be intercepted by attackers if transmitted over unencrypted channels. This can lead to identity theft, session hijacking, data breaches, and compliance violations.",
        "recommendations": "Enforce the use of strong encryption protocols such as TLS 1.2 or TLS 1.3 for all communications. Replace outdated and insecure protocols (e.g., SSL, TLS 1.0, HTTP, and Telnet) with HTTPS, SFTP, SSH, and secure email protocols. Implement HSTS (HTTP Strict Transport Security) to force HTTPS usage and regularly audit network traffic for unencrypted data leaks.",
        "references": ["OWASP – Transport Layer Protection Cheat Sheet: https://owasp.org/www-project-cheat-sheets/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html","CWE-319 – Cleartext Transmission of Sensitive Information: https://cwe.mitre.org/data/definitions/319.html"]
    },
    {
        "title": "Weak Security Ciphers",
        "description": "Weak security ciphers refer to the use of outdated, vulnerable, or cryptographically weak encryption algorithms for securing communications or data. Common examples include MD5, SHA-1, RC4, DES, and 3DES, which are susceptible to collision attacks, brute-force cracking, and cryptanalysis. Applications that rely on these weak ciphers risk exposing sensitive data to interception or tampering.",
        "impact": "Using weak ciphers can lead to compromised encryption, unauthorized data decryption, and exposure to MITM (Man-in-the-Middle) attacks. Attackers can exploit these weaknesses to decrypt confidential information, impersonate users, forge digital signatures, or hijack encrypted sessions.",
        "recommendations": "Disable outdated and vulnerable ciphers, and enforce the use of modern, secure cryptographic algorithms such as AES-256, SHA-256, TLS 1.2, and TLS 1.3.",
        "references": ["OWASP – Cryptographic Storage Cheat Sheet: https://owasp.org/www-project-cheat-sheets/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html","CWE-327 – Use of a Broken or Risky Cryptographic Algorithm: https://cwe.mitre.org/data/definitions/327.html"]
    },
    {
        "title": "Cross-Site Scripting - Reflected (XSS)",
        "description": "Reflected Cross-Site Scripting (Reflected XSS) occurs when an application improperly handles user input and reflects it back in HTTP responses without sanitization or encoding. Attackers can craft malicious links containing JavaScript payloads that execute when a victim visits the manipulated URL. This can lead to session hijacking, credential theft, or redirection to malicious websites.",
        "impact": "Reflected XSS enables attackers to execute arbitrary scripts in a victim’s browser, allowing them to steal cookies, impersonate users, deface web pages, or spread malware. Since the attack relies on social engineering (e.g., phishing emails, malicious links), it can affect a large number of users.",
        "recommendations": "Validate and sanitize all user inputs by stripping or encoding special characters (<, >, \", ', etc.). Use Content Security Policy (CSP) to restrict script execution and implement HTTP-only and Secure flags for cookies to mitigate session hijacking.",
        "references": ["OWASP – Cross-Site Scripting (XSS) Prevention Cheat Sheet: https://owasp.org/www-community/attacks/xss/","CWE-79 – Improper Neutralization of Input During Web Page Generation ('XSS'): https://cwe.mitre.org/data/definitions/79.html","PortSwigger – Reflected XSS Exploitation Guide: https://portswigger.net/web-security/cross-site-scripting/reflected"]
    },
    {
        "title": "Cross-Site Scripting - Stored (XSS)",
        "description": "Stored Cross-Site Scripting (Stored XSS) occurs when an application permanently stores unvalidated user input (such as comments, messages, or form submissions) and later displays it to other users without proper sanitization or encoding. Unlike Reflected XSS, which requires user interaction (e.g., clicking a link), Stored XSS executes automatically when users visit the affected page, making it more dangerous.",
        "impact": "Stored XSS allows attackers to inject persistent JavaScript payloads, leading to session hijacking, account takeovers, data theft, keylogging, or malware distribution. Since the malicious script is stored on the server, it can affect all users who view the compromised content, potentially leading to mass exploitation.",
        "recommendations": "Validate and sanitize all user inputs before storing them, and encode output to prevent script execution. Use Content Security Policy (CSP) to limit JavaScript execution and ensure HTTP-only, Secure, and SameSite flags are set for cookies.",
        "references": ["OWASP – Cross-Site Scripting (XSS) Prevention Cheat Sheet: https://owasp.org/www-community/attacks/xss/","CWE-79 – Improper Neutralization of Input During Web Page Generation ('XSS'): https://cwe.mitre.org/data/definitions/79.html","PortSwigger – Stored XSS Exploitation Guide: https://portswigger.net/web-security/cross-site-scripting/stored"]
    },
    {
        "title": "Cross-Site Scripting - DOM (XSS)",
        "description": "DOM-based Cross-Site Scripting (DOM XSS) occurs when a web application modifies the Document Object Model (DOM) using untrusted user input without proper sanitization or encoding. Unlike Reflected or Stored XSS, where the server processes malicious input, DOM XSS occurs entirely in the browser, making it harder to detect via traditional security tools. This often happens when JavaScript functions like innerHTML, document.write(), eval(), or location.href handle user-controlled data insecurely.",
        "impact": "An attacker can exploit DOM XSS to inject and execute malicious JavaScript within the victim’s browser, leading to session hijacking, credential theft, keylogging, or phishing attacks. Since the attack is client-side, it bypasses server-side sanitization, and traditional security mechanisms like Web Application Firewalls (WAFs) may not detect it. Exploited vulnerabilities in Single Page Applications (SPAs) and JavaScript-heavy frameworks (React, Angular, Vue.js) can result in widespread exploitation.",
        "recommendations": "Avoid directly inserting user input into the DOM; instead, use safe JavaScript APIs such as textContent or setAttribute(). Implement JavaScript sandboxing techniques and enforce Content Security Policy (CSP) to restrict script execution. Use security libraries like DOMPurify to sanitize user-controlled inputs before rendering them on the page.",
        "references": ["OWASP – DOM XSS Prevention Cheat Sheet: https://owasp.org/www-community/attacks/DOM_Based_XSS","CWE-79 – Improper Neutralization of Input During Web Page Generation ('XSS'): https://cwe.mitre.org/data/definitions/79.html","PortSwigger – DOM XSS Exploitation Guide: https://portswigger.net/web-security/cross-site-scripting/dom-based"]
    },
    {
        "title": "SQL Injection",
        "description": "SQL Injection (SQLi) occurs when an attacker manipulates user input in SQL queries, allowing them to execute arbitrary SQL commands against the database. This happens when applications fail to properly sanitize and validate user inputs, leading to unauthorized data access, modification, or deletion. SQLi vulnerabilities often arise in login forms, search bars, API endpoints, and poorly constructed database queries.",
        "impact": "An attacker exploiting SQL Injection can bypass authentication, exfiltrate sensitive data, modify or delete database records, and even execute system-level commands in severe cases. SQLi is one of the most critical vulnerabilities because it can lead to complete database compromise, affecting user credentials, financial data, and application integrity.",
        "recommendations": "Use prepared statements (parameterized queries) and ORM frameworks (e.g., SQLAlchemy, Hibernate) to prevent direct injection of user input into SQL queries. Implement input validation and allowlists for expected data formats. Enforce least privilege access controls to limit database exposure and use Web Application Firewalls (WAFs) to detect and block SQLi attempts.",
        "references": ["OWASP – SQL Injection Prevention Cheat Sheet: https://owasp.org/www-community/attacks/SQL_Injection","CWE-89 – Improper Neutralization of Special Elements in SQL Commands ('SQL Injection'): https://cwe.mitre.org/data/definitions/89.html","PortSwigger – SQL Injection Guide: https://portswigger.net/web-security/sql-injection"]
    },
    {
        "title": "NoSQL Injection",
        "description": "NoSQL Injection occurs when an attacker manipulates unvalidated user input in NoSQL queries, allowing them to execute unauthorized database commands. Unlike traditional SQL Injection, which targets relational databases, NoSQL Injection affects document-based databases like MongoDB, CouchDB, Firebase, and Elasticsearch. Common vulnerabilities arise due to unsafe handling of user inputs in JSON queries, dynamic query construction, and lack of proper input validation.",
        "impact": "Exploiting NoSQL Injection can allow an attacker to bypass authentication, access sensitive data, modify or delete database records, and execute arbitrary operations. Since NoSQL databases often store unstructured or sensitive data (e.g., user sessions, authentication tokens, and logs), a successful attack can lead to account takeover, data breaches, and business disruption. This vulnerability is particularly dangerous in modern web applications and API-based services that rely on MongoDB, Firebase, or other NoSQL solutions.",
        "recommendations": "Use input validation and parameterized queries to prevent user-controlled input from directly modifying NoSQL queries. Avoid accepting raw user input in database queries, and instead use safe query builders such as Mongoose for MongoDB. Implement least privilege access control for database operations and sanitize user input to prevent unwanted query expansion.",
        "references": ["OWASP – NoSQL Injection Guide: https://owasp.org/www-community/attacks/NoSQL_Injection","CWE-943 – Improper Neutralization of Special Elements in NoSQL Queries: https://cwe.mitre.org/data/definitions/943.html","PortSwigger – NoSQL Injection Exploitation: https://portswigger.net/web-security/nosql-injection"]
    },
    {
        "title": "Server Side Template Injection (SSTI)",
        "description": "Server-Side Template Injection (SSTI) occurs when an attacker injects malicious template code into an application that processes user input using a server-side templating engine (e.g., Jinja2, Twig, Freemarker, Velocity, Pug). If user-controlled input is improperly handled within a template, attackers can execute arbitrary code, leak sensitive data, or gain remote command execution (RCE) on the server.",
        "impact": "Exploiting SSTI can lead to data leakage, account compromise, and full server takeover if the attacker gains remote code execution (RCE). Depending on the template engine used, attackers can execute shell commands, read environment variables (e.g., database credentials, API keys), or modify server-side templates. SSTI is a critical vulnerability in modern web applications that rely on dynamic template rendering.",
        "recommendations": "Avoid rendering user-supplied input in server-side templates. Use safe rendering functions (e.g., Jinja2’s selectattr(), Twig’s sandbox mode) and enforce strict input validation and sanitization. Where possible, disable template execution functions (eval, exec) and use static templates to minimize risk.",
        "references": ["OWASP – Server-Side Template Injection Guide: https://owasp.org/www-community/attacks/Server-Side_Template_Injection","CWE-1336 – Improper Neutralization of Special Elements in Template Engines: https://cwe.mitre.org/data/definitions/1336.html","PortSwigger – SSTI Exploitation Guide: https://portswigger.net/web-security/server-side-template-injection"]
    },
    {
        "title": "Server Side Request Forgery (SSRF)",
        "description": "Server-Side Request Forgery (SSRF) occurs when an attacker manipulates a server into making unintended requests to internal or external resources. This happens when an application accepts and processes unvalidated user input as part of a request to another server. Attackers exploit SSRF to bypass network restrictions, access internal systems, exfiltrate sensitive data, or scan internal networks.",
        "impact": "SSRF can lead to internal network reconnaissance, data leakage, and remote code execution (RCE) if the server interacts with cloud metadata services (e.g., AWS EC2 Instance Metadata API). Attackers can abuse SSRF to bypass firewalls, interact with internal APIs, or exploit vulnerable services, making it a significant risk for cloud-based applications and microservices architectures.",
        "recommendations": "Enforce strict allowlists for outbound requests and reject all requests to internal/private IP ranges (127.0.0.1, 169.254.169.254). Validate and sanitize user-supplied URLs before processing requests, and disable unnecessary URL-fetching features. Implement network segmentation and firewalls to block access to sensitive internal services, and use Web Application Firewalls (WAFs) and monitoring tools to detect SSRF attempts.",
        "references": ["OWASP – SSRF Prevention Cheat Sheet: https://owasp.org/www-community/attacks/Server_Side_Request_Forgery","CWE-918 – Server-Side Request Forgery (SSRF): https://cwe.mitre.org/data/definitions/918.html","PortSwigger – SSRF Exploitation Guide: https://portswigger.net/web-security/ssrf"]
    },
    {
        "title": "Cross Side Request Forgery (CSRF)",
        "description": "Cross-Site Request Forgery (CSRF/XSRF) is an attack where an attacker tricks a victim into making unintended requests to a web application where they are authenticated. This happens when the application does not properly verify request origins, allowing attackers to perform unauthorized actions on behalf of the victim. CSRF exploits authenticated sessions, especially in applications that rely solely on cookies for authentication.",
        "impact": "A successful CSRF attack can lead to account takeovers, unauthorized fund transfers, password changes, and data modifications. Attackers can force users to perform unintended actions such as updating account settings, posting malicious content, or even executing admin-level operations.",
        "recommendations": "Use CSRF tokens (anti-CSRF tokens) to validate requests and ensure they originate from legitimate users. Implement SameSite cookie attributes (Strict or Lax) to prevent unauthorized cookie usage. Enforce CORS (Cross-Origin Resource Sharing) policies and require user re-authentication for critical actions. Additionally, use CAPTCHA or multi-factor authentication (MFA) to mitigate automated CSRF attacks.",
        "references": ["OWASP – CSRF Prevention Cheat Sheet: https://owasp.org/www-community/attacks/csrf","CWE-352 – Cross-Site Request Forgery (CSRF): https://cwe.mitre.org/data/definitions/352.html","PortSwigger – CSRF Exploitation Guide: https://portswigger.net/web-security/csrf"]
    },
    {
        "title": "Command Injection",
        "description": "Command Injection occurs when an attacker injects arbitrary system commands into an application that executes system-level operations without proper input validation. This vulnerability typically arises when user-supplied input is passed directly to shell commands via functions like exec(), system(), popen(), or backticks in programming languages such as PHP, Python, Bash, and Node.js. Attackers can exploit this to execute unauthorized commands, manipulate files, or gain full system control.",
        "impact": "A successful Command Injection attack can lead to remote code execution (RCE), allowing attackers to steal sensitive data, modify or delete files, create backdoors, and escalate privileges. It can also be used to bypass authentication, exfiltrate database credentials, and compromise entire infrastructures. This vulnerability is highly critical as it often leads to complete system takeover.",
        "recommendations": "Never pass user input directly to system commands. Use safe API functions that do not invoke the shell (e.g., subprocess.run() in Python with shell=False). Implement allowlists to restrict input to expected values and apply parameterized queries. Enforce least privilege execution and use sandboxing techniques to limit process capabilities.",
        "references": ["OWASP – Command Injection Guide: https://owasp.org/www-community/attacks/Command_Injection","CWE-78 – Improper Neutralization of Special Elements in OS Command: https://cwe.mitre.org/data/definitions/78.html","PortSwigger – Command Injection Exploitation Guide: https://portswigger.net/web-security/os-command-injection"]
    },
    {
        "title": "XML Injection (XXE) ",
        "description": "XML Injection occurs when an attacker manipulates user-supplied input within an XML document or query, causing unintended behavior in the application. This typically happens in XML-based data exchanges, such as SOAP requests, web services, or XML parsers, that fail to properly validate input. Attackers can exploit XML Injection to modify application logic, extract sensitive data, or even execute external entity attacks (XXE).",
        "impact": "A successful XML Injection attack can lead to data leaks, unauthorized modifications, or bypassing access controls in XML-based applications. When combined with XXE (XML External Entity) vulnerabilities, attackers can read server files, execute remote code, and perform SSRF (Server-Side Request Forgery) attacks.",
        "recommendations": "Validate and sanitize all user-supplied input before parsing XML documents. Use allowlists to permit only expected values and reject malformed XML structures. Disable DTD (Document Type Definitions) and external entity processing in XML parsers to prevent XXE attacks. Where possible, replace XML-based communication with more secure formats like JSON.",
        "references": ["OWASP – XML Injection Guide: https://owasp.org/www-community/attacks/XML_Injection","CWE-91 – XML Injection (aka Blind XPath Injection): https://cwe.mitre.org/data/definitions/91.html","PortSwigger – XML Injection Exploitation Guide: https://portswigger.net/web-security/xml-injection"]
    },
    {
        "title": "LDAP Injection",
        "description": "LDAP Injection occurs when an application improperly handles user input in LDAP queries, allowing attackers to manipulate Lightweight Directory Access Protocol (LDAP) statements. This can lead to unauthorized authentication bypass, data exfiltration, privilege escalation, or modification of directory entries. LDAP Injection typically affects applications that interact with Active Directory (AD), OpenLDAP, or other directory services.",
        "impact": "A successful LDAP Injection attack can allow an attacker to bypass authentication, retrieve sensitive directory information, or modify user permissions. If exploited, it can lead to compromised credentials, unauthorized access to network resources, and even full domain compromise in corporate environments relying on LDAP-based authentication.",
        "recommendations": "Use parameterized LDAP queries and avoid constructing LDAP statements dynamically with user input. Implement input validation and allowlists to restrict special characters like *, &, |, and (). Enforce least privilege access to restrict unauthorized directory queries and use secure authentication methods (e.g., LDAPS instead of LDAP over plain text).",
        "references": ["OWASP – LDAP Injection Guide: https://owasp.org/www-community/attacks/LDAP_Injection","CWE-90 – Improper Neutralization of Special Elements in LDAP Queries: https://cwe.mitre.org/data/definitions/90.html","PortSwigger – LDAP Injection Exploitation Guide: https://portswigger.net/web-security/ldap-injection"]
    },
    {
        "title": "Server Side Inclusion (SSI)",
        "description": "Server-Side Inclusion (SSI) Injection occurs when an attacker injects malicious server-side directives into an application that improperly processes SSI commands. This vulnerability allows attackers to execute unauthorized commands, read sensitive files, or gain remote code execution (RCE) if the server parses and executes user-supplied input as SSI directives. SSI Injection typically affects web servers and applications that support .shtml, .stm, .shtm files, or include dynamic server-side scripts.",
        "impact": "A successful SSI Injection attack can allow an attacker to exfiltrate sensitive files, execute system commands, and compromise the underlying server. This can lead to data leaks, privilege escalation, and full server takeover. If an application allows user-controlled SSI directives, it can be used to bypass authentication, inject malicious scripts, or exploit internal network services.",
        "recommendations": "Disable SSI processing if not required, or restrict it to trusted sources. Validate and sanitize user-supplied input to prevent malicious directives from being executed. Enforce least privilege execution for web servers and applications to minimize damage if an exploit occurs. Use Web Application Firewalls (WAFs) and monitoring tools to detect and block potential SSI Injection attempts.",
        "references": ["OWASP – SSI Injection Guide: https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection","CWE-98 – Improper Control of Filename for Include/Require Statement: https://cwe.mitre.org/data/definitions/98.html","PortSwigger – Server-Side Inclusion Exploitation: https://portswigger.net/web-security/ssi"]
    },
    {
        "title": "Remote File Inclusion (RFI)",
        "description": "Remote File Inclusion (RFI) occurs when an application dynamically includes external files from user input without proper validation, allowing attackers to inject malicious scripts or execute remote code. This vulnerability typically affects PHP, ASP, and JSP-based applications that allow file inclusion functions such as include(), require(), or file_get_contents() to process unvalidated URLs or file paths.",
        "impact": "A successful RFI attack can lead to remote code execution (RCE), server compromise, data theft, and malware distribution. Attackers can host malicious scripts on external servers and force the vulnerable application to execute them, potentially stealing credentials, exfiltrating sensitive data, or gaining full control of the system. RFI is often used as a launch point for larger cyber attacks, including webshell deployment and persistent backdoors.",
        "recommendations": "Disable remote file inclusion by setting allow_url_include=Off and allow_url_fopen=Off in PHP configurations. Implement strict input validation and allowlists to restrict file paths to trusted directories. Use hardcoded file paths instead of user-controlled input for file inclusion. Employ Web Application Firewalls (WAFs) and intrusion detection systems (IDS) to detect and block RFI attempts.",
        "references": ["OWASP – Remote File Inclusion (RFI) Guide: https://owasp.org/www-community/attacks/Remote_File_Inclusion","CWE-98 – Improper Control of Filename for Include/Require Statement: https://cwe.mitre.org/data/definitions/98.html","PortSwigger – RFI Exploitation Guide: https://portswigger.net/web-security/file-upload"]
    },
    {
        "title": "HTTP Request Smuggling",
        "description": "HTTP Request Smuggling occurs when an attacker exploits inconsistencies in how front-end proxies and back-end servers process HTTP requests, allowing them to smuggle hidden requests past security controls. This vulnerability arises when different components of a web infrastructure interpret Content-Length and Transfer-Encoding headers differently, leading to request splitting, request desynchronization, or cache poisoning.",
        "impact": "A successful HTTP Request Smuggling attack can allow an attacker to bypass security controls, hijack user sessions, steal sensitive data, or poison web caches. It can also be used to smuggle malicious requests, enabling credential theft, cross-user data access, and even remote code execution (RCE) in some cases. This vulnerability is particularly dangerous for web applications using load balancers, reverse proxies, or content delivery networks (CDNs).",
        "recommendations": "Ensure consistent parsing of HTTP headers across all web infrastructure components by disabling support for both Content-Length and Transfer-Encoding headers in the same request. Use modern web servers that handle ambiguous HTTP request parsing securely. Apply strict input validation and use WAF (Web Application Firewalls) to detect and block suspicious request patterns.",
        "references": ["OWASP – HTTP Request Smuggling Guide: https://owasp.org/www-community/attacks/HTTP_Request_Smuggling","CWE-444 – Inconsistent Interpretation of HTTP Requests: https://cwe.mitre.org/data/definitions/444.html","PortSwigger – HTTP Request Smuggling Exploitation: https://portswigger.net/web-security/request-smuggling"]
    },
    {
        "title": "Host Header Injection",
        "description": "Host Header Injection occurs when an attacker manipulates the Host header in an HTTP request to exploit misconfigured web servers, virtual hosts, or backend services. Since many applications rely on the Host header for routing, security checks, and generating absolute URLs, improperly handling this input can lead to cache poisoning, password reset token hijacking, SSRF, and web cache deception attacks.",
        "impact": "A successful Host Header Injection attack can allow an attacker to redirect users to phishing sites, steal session tokens, manipulate password reset links, and exploit internal services. It can also lead to web cache poisoning, where malicious content is cached and served to legitimate users. In cases where the application interacts with internal services based on the Host header, an attacker could escalate this to Server-Side Request Forgery (SSRF).",
        "recommendations": "Validate and enforce a strict allowlist for accepted Host headers on the server. Use absolute URLs instead of relying on the Host header when generating links. Configure the web server (e.g., Apache, Nginx, or IIS) to reject unrecognized Host values. If your application uses reverse proxies, ensure backend servers do not trust arbitrary Host headers.",
        "references": ["OWASP – Host Header Injection Guide: https://owasp.org/www-community/vulnerabilities/attacks/Host_header_injection","CWE-640 – Weak Authentication Due to Improper Host Header Validation: https://cwe.mitre.org/data/definitions/640.html","PortSwigger – Host Header Attack Exploitation: https://portswigger.net/web-security/host-header"]
    },
    {
        "title": "Open Redirect",
        "description": "Open Redirect vulnerabilities occur when an application improperly processes user-supplied input in URL redirection functions, allowing attackers to redirect users to malicious websites. This often happens when query parameters, headers, or form inputs are used to construct redirect URLs without proper validation. Attackers can exploit this to phish users, steal credentials, or distribute malware.",
        "impact": "A successful Open Redirect attack can trick users into visiting fake login pages, leading to credential theft and phishing attacks. It can also be used to bypass security mechanisms, evade authentication checks, or perform session hijacking by redirecting authenticated users to attacker-controlled domains.",
        "recommendations": "Avoid using user input directly in redirects. Instead, use a predefined allowlist of trusted URLs and validate all redirect destinations. Implement URL encoding and referer validation to prevent manipulation. Use absolute paths rather than accepting arbitrary external URLs for redirections.",
        "references": ["OWASP – Open Redirect Guide: https://owasp.org/www-community/attacks/Unvalidated_Redirects_and_Forwards","CWE-601 – URL Redirection to Untrusted Site ('Open Redirect'): https://cwe.mitre.org/data/definitions/601.html","PortSwigger – Open Redirect Exploitation: https://portswigger.net/web-security/open-redirection"]
    },
    {
        "title": "Cross-Origin Resource Sharing (CORS)",
        "description": "Cross-Origin Resource Sharing (CORS) is a security feature implemented in web browsers to control how web pages from different origins can interact with each other. If improperly configured, a web application may allow unauthorized websites to access its resources, leading to data leaks, credential theft, or API abuse. CORS misconfigurations often occur when wildcard (*) policies are used or when sensitive requests (e.g., authentication tokens) are allowed across origins without proper validation.",
        "impact": "A poorly configured CORS policy can enable Cross-Origin attacks, allowing an attacker to bypass Same-Origin Policy (SOP) protections and steal sensitive user data such as session tokens, API responses, or personal information. Exploiting weak CORS settings can also facilitate Cross-Site Request Forgery (CSRF), API abuse, and unauthorized data exfiltration.",
        "recommendations": "Restrict CORS policies to a specific allowlist of trusted origins instead of using Access-Control-Allow-Origin: *. Disallow credentialed requests (withCredentials: true) from untrusted origins to prevent session hijacking. Use restrictive HTTP methods and headers by defining Access-Control-Allow-Methods and Access-Control-Allow-Headers explicitly. Regularly review CORS configurations in both web applications and API services to prevent unintended exposure.",
        "references": ["OWASP – CORS Security Guide: https://owasp.org/www-community/attacks/CORS_Misconfiguration","CWE-942 – Permissive Cross-Domain Policy: https://cwe.mitre.org/data/definitions/942.html","PortSwigger – CORS Security Exploitation: https://portswigger.net/web-security/cors"]
    },
    {
        "title": "Account Lockout",
        "description": "Account Lockout is a security feature designed to prevent brute-force attacks and unauthorized access attempts by locking user accounts after multiple failed login attempts. While this mechanism enhances security, improper implementation (e.g., permanent lockout, lack of notification, or predictable reset policies) can lead to denial-of-service (DoS) attacks, user frustration, or account takeover risks.",
        "impact": "If Account Lockout is too restrictive, legitimate users may be locked out of their accounts, causing business disruption or increasing support costs. Conversely, if the lockout mechanism is too lenient, attackers can brute-force passwords or use credential stuffing techniques to compromise accounts. Attackers may also exploit account lockout policies in denial-of-service (DoS) attacks by deliberately locking out multiple user accounts.",
        "recommendations": "Implement progressive lockout mechanisms, such as increasing the delay between login attempts rather than permanently locking accounts. Use multi-factor authentication (MFA) to enhance security instead of solely relying on account lockout. Provide secure account recovery options that require identity verification instead of automatic reset links. Log and monitor failed login attempts to detect unusual patterns and prevent automated attacks.",
        "references": ["OWASP – Authentication Cheat Sheet: https://owasp.org/www-project-authentication-cheat-sheet/","CWE-307 – Improper Restriction of Excessive Authentication Attempts: https://cwe.mitre.org/data/definitions/307.html"]
    },
    {
        "title": "Cache Poisoning",
        "description": "Cache Poisoning occurs when an attacker manipulates a web cache (e.g., CDN, proxy, or browser cache) to store and serve malicious or unauthorized content to users. This happens when unvalidated user input is used in cache keys or headers, allowing attackers to inject malicious scripts, incorrect responses, or phishing pages into the cache. Cache poisoning can also be exploited in combination with other attacks like Cross-Site Scripting (XSS) or Open Redirects.",
        "impact": "A successful Cache Poisoning attack can lead to users receiving malicious content, such as phishing pages, fake login forms, or injected JavaScript. Attackers can also alter application responses to manipulate user behavior or leak sensitive information stored in cached responses. If security headers (e.g., CSP, HSTS) are stripped or poisoned, it can weaken security protections for all users.",
        "recommendations": "Ensure strict cache control policies by using Cache-Control and Vary headers appropriately. Validate user-controlled input before including it in cached responses. Use allowlists for headers and query parameters to prevent unauthorized cache key manipulation. Implement proper security headers (CSP, HSTS) to reduce the impact of poisoned caches.",
        "references": ["OWASP – Cache Poisoning Attack Guide: https://owasp.org/www-community/attacks/Cache_Poisoning","CWE-1039 – Improper Restriction of Cacheable HTTP Responses: https://cwe.mitre.org/data/definitions/1039.html","PortSwigger – Cache Poisoning Exploitation: https://portswigger.net/web-security/web-cache-poisoning"]
    }
]
